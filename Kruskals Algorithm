#include <stdio.h>
#include <stdlib.h>
#include <limits.h>


int find(int parent[], int i) {
	if(parent[i]==-1)
		return i;
	return find(parent,parent[i]);
}


void union1(int parent[], int rank[], int i, int j) {
	int rooti=find(parent,i);
	int rootj=find(parent,j);
	if(rooti==rootj){
		return;}
	if(rank[rooti]<rank[rootj]){
		parent[rooti]=rootj;
	}
	else if(rank[rooti]>rank[rootj]){
		parent[rootj]=rooti;
	}
	else{
		parent[rootj]=rooti;
		rank[rooti]++;
	}
	
}


void kruskalMST(int **cost, int V) {
	int parent[V],rank[V];
	int mincost=0;
	int edge_count=0;
	for(int i =0;i<V;i++){
		parent[i]=-1;
		rank[i]=0;
	}
	while(edge_count<V-1){
		int min=INT_MAX, a=-1,b=-1;
		for(int i=0;i<V;i++){
			for(int j=0; j<V;j++){
				if (cost[i][j]!=0 && cost[i][j]<min &&find(parent,i)!=find(parent,j)){
					min=cost[i][j];
					a=i;
					b=j;
				}
			}
		}
	
	if(a!=-1 && b!=-1){
		union1(parent,rank,a,b);
		printf("Edge %d:(%d, %d) cost:%d\n",edge_count++,a,b,min);
		mincost+=min;
		cost[a][b]=cost[b][a]=INT_MAX;
	}else{
		break;
	}
	}
	printf("Minimum cost= %d\n",mincost);
}


int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}
